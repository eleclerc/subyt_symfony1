<?php

/**
 * BaseTag
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $title
 * @property string $category
 * @property Doctrine_Collection $Videos
 * @property Doctrine_Collection $VideoTags
 * 
 * @method string              getTitle()     Returns the current record's "title" value
 * @method string              getCategory()  Returns the current record's "category" value
 * @method Doctrine_Collection getVideos()    Returns the current record's "Videos" collection
 * @method Doctrine_Collection getVideoTags() Returns the current record's "VideoTags" collection
 * @method Tag                 setTitle()     Sets the current record's "title" value
 * @method Tag                 setCategory()  Sets the current record's "category" value
 * @method Tag                 setVideos()    Sets the current record's "Videos" collection
 * @method Tag                 setVideoTags() Sets the current record's "VideoTags" collection
 * 
 * @package    subyt
 * @subpackage model
 * @author     Eric Leclerc <eric.leclerc@gmail.com>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseTag extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tag');
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('category', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '50',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Video as Videos', array(
             'refClass' => 'VideoTag',
             'local' => 'tag_id',
             'foreign' => 'video_id'));

        $this->hasMany('VideoTag as VideoTags', array(
             'local' => 'id',
             'foreign' => 'tag_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}